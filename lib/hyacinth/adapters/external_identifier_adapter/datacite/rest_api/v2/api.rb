# frozen_string_literal: true

require 'json'
class Hyacinth::Adapters::ExternalIdentifierAdapter::Datacite::RestApi::V2::Api
  include Hyacinth::Adapters::ConfigurableLogger

  # @param rest_api [String] url for the DataCite REST API
  # @param user [String] username used to authenticate on the API
  # @param password [String] password used to authenticate on the API
  def initialize(rest_api:, user:, password:, **args)
    @datacite_rest_api_url = rest_api
    @basic_auth_user = user
    @basic_auth_password = password
    configure_logger(args)
  end

  # @return [Faraday] connection to the DataCite REST API
  def connect
    Faraday.new(@datacite_rest_api_url).tap do |c|
      c.request :authorization, :basic, @basic_auth_user, @basic_auth_password
    end
  end

  # Get data for a given DOI
  # see https://support.datacite.org/reference/dois-2#get_dois-id
  # @param doi [String] DOI
  # @return [Faraday::Response] response from the DataCite REST API
  def get_doi(doi)
    response = connect.get("/dois/#{doi}")
    logger.debug("API response body: #{response.body}")
    response
  end

  def doi_exists?(doi)
    get_doi(doi).status.eql? 200
  end

  def doi_findable?(doi)
    attributes_for(doi)&.dig('state').to_s.casecmp?('findable')
  end

  def attributes_for(doi)
    response = get_doi(doi)
    return nil unless response.status.eql? 200
    JSON.parse(response.body).dig('data', 'attributes')
  end

  # @param api_http_response_body [String] the body content from the response generated by the DataCite REST API
  # @return [String] the doi contained within the DataCite REST API response
  def parse_doi_from_api_response_body(api_http_response_body)
    JSON.parse(api_http_response_body).dig('data', 'attributes', 'doi')
  end

  # @param api_http_response_body [String] the body content from the response generated by the DataCite REST API
  # @return [String] the doi state contained within the DataCite REST API response
  def parse_state_from_api_response_body(api_http_response_body)
    JSON.parse(api_http_response_body).dig('data', 'attributes', 'state')
  end

  # @param api_http_response_body [String] the body content from the response generated by the DataCite REST API
  # @return [String] the url contained within the DataCite REST API response
  def parse_url_from_api_response_body(api_http_response_body)
    JSON.parse(api_http_response_body).dig('data', 'attributes', 'url')
  end

  # Create a new DOI
  # see https://support.datacite.org/reference/dois-2#post_dois
  # @param request_body_json [String] string containing the payload (json) to be sent to the DataCite REST API
  # @return [Faraday::Response] response from the DataCite REST API
  def create_doi(request_body_json)
    response = connect.post("/dois") do |req|
      req.headers['Content-Type'] = 'application/vnd.api+json'
      req.body = request_body_json
    end
    logger.debug("API response body: #{response.body}")
    response
  end

  # Update a DOI
  # see https://support.datacite.org/reference/dois-2#put_dois-id
  # @param doi [String] DOI
  # @param request_body_json [String] string containing the payload (json) to be sent to the DataCite REST API
  # @return [Faraday::Response] response from the DataCite REST API
  def update_doi(doi, request_body_json)
    response = connect.put("/dois/#{doi}") do |req|
      req.headers['Content-Type'] = 'application/vnd.api+json'
      req.body = request_body_json
    end
    logger.debug("API response body: #{response.body}")
    response
  end
end
