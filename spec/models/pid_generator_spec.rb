require 'rails_helper'

describe PidGenerator do

  # This may seem like an unnecessary test, but there was an issue with the Noid gem at
  # one point (in version 0.7.0 and presumably earlier) that actually DID cause these
  # sequential mints to be identical.
  it "ensures that two noid instances with the same seed and template and DIFFERENT sequences do not create the same pids" do
    pid_minter1 = Noid::Minter.new(:template => 'ldpd:.reeeeeeee')
    pid_minter1.seed(192548637498850379850405658298152906991, 1)
    first_mint = pid_minter1.mint

    pid_minter2 = Noid::Minter.new(:template => 'ldpd:.reeeeeeee')
    pid_minter2.seed(192548637498850379850405658298152906991, 2)
    second_mint = pid_minter2.mint

    expect(first_mint).not_to eq(second_mint)
  end

  it "correctly predicts the number of unique identifiers generated by a noid minter" do
    minter = Noid::Minter.new(:template => 'cul:.ree')
    number_of_expected_mints = minter.template.max

    counter = 0
    begin
      while minter.mint do
        counter += 1
      end
    rescue StandardError => ex
      # The minter throws an exception when it runs out of mints
    end

    expect(counter).to eq(number_of_expected_mints)

  end

  it "doesn't mint duplicates" do

    hsh = {}
    pid_minter = Noid::Minter.new(:template => 'cul:.reee')
    number_of_expected_mints = pid_minter.template.max

    number_of_expected_mints.times {|i|
      minted_value = pid_minter.mint
      expect(hsh).not_to have_key(minted_value)
      hsh[minted_value] = true # Add this value to the hash
    }
  end

end
